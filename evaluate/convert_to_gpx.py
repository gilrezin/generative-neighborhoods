import ast

def convert_to_gpx(minBounds, maxBounds, input):
    lines = ast.literal_eval(input)

    output = ""

    output += """
<?xml version="1.0" encoding="UTF-8"?>
<gpx version="1.1" xmlns="http://www.topografix.com/GPX/1/1" 
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
     xsi:schemaLocation="http://www.topografix.com/GPX/1/1 
                         http://www.topografix.com/GPX/1/1/gpx.xsd">
"""

    for line in lines:
        output += "  <trk>\n    <trkseg>\n"
        for coordinate in line:
            output += "      <trkpt lat=\"" + str(round(float(coordinate[0]) * (maxBounds[0] - minBounds[0]) + minBounds[0], 5)) + "\" lon=\"" + str(round(float(coordinate[1]) * (maxBounds[1] - minBounds[1]) + minBounds[1], 5)) + "\"/>\n"
        output += "    </trkseg>\n  </trk>\n"

    output += "</gpx>"
    
    with open("output.gpx", "w") as file:
        file.write(output)
    print("success!")
        
#llm_output = "[[(1.0, 0.05008), (0.83275, 0.39733), (0.77544, 0.36728), (0.50761, 0.52421), (0.26784, 0.76461), (0.08889, 1.0), (0.0, 0.86811), (0.37077, 0.29716), (0.44679, 0.19366), (0.88655, 0.0), (1.0, 0.05008)]]"
llm_output = "[[(0.04274, 0.06887), (0.06118, 0.05194), (0.06475, 0.04928), (0.06911, 0.04839), (0.07193, 0.04882), (0.07464, 0.05037), (0.07677, 0.05289), (0.08276, 0.06317), (0.08791, 0.07441), (0.09499, 0.08837), (0.10022, 0.09854), (0.10313, 0.10530), (0.10778, 0.11219), (0.11116, 0.11707), (0.11377, 0.12304), (0.11429, 0.12786), (0.11211, 0.13284), (0.10811, 0.13621), (0.10329, 0.13758), (0.09802, 0.13690), (0.09317, 0.13464), (0.08898, 0.13085), (0.08620, 0.12603), (0.08526, 0.12121), (0.08627, 0.11640), (0.08907, 0.11261), (0.09327, 0.11034), (0.09793, 0.10966), (0.10315, 0.11073), (0.10787, 0.11296), (0.11124, 0.11779), (0.11385, 0.12288), (0.11442, 0.12770), (0.11238, 0.13272), (0.10818, 0.13634), (0.10326, 0.13756), (0.09806, 0.13695), (0.09331, 0.13465), (0.08918, 0.1309), (0.08646, 0.12599), (0.08557, 0.12116), (0.08657, 0.11634), (0.08936, 0.1126), (0.09336, 0.11035), (0.09797, 0.10976), (0.10317, 0.11063)], [(0.00007, 0.00275), (0.00142, 0.00248), (0.00162, 0.00237), (0.00208, 0.00203), (0.00389, 0.00047), (0.00508, -0.00084)], [(0.00133, 0.00244), (0.00266, 0.00219), (0.00276, 0.00206), (0.00284, 0.00193), (0.00303, 0.00171), (0.00317, 0.00155), (0.00325, 0.00135), (0.00323, 0.00119), (0.00297, 0.00107), (0.0026, 0.00095), (0.00221, 0.0009), (0.00201, 0.00091), (0.00187, 0.00095), (0.00168, 0.00108), (0.00153, 0.00122), (0.00153, 0.00147), (0.00172, 0.00171), (0.00217, 0.00203), (0.00264, 0.00217), (0.00275, 0.00205), (0.00282, 0.00195), (0.00298, 0.00174), (0.00311, 0.00155), (0.00318, 0.00133), (0.00312, 0.00116), (0.00276, 0.00104), (0.00228, 0.00094), (0.00206, 0.00093), (0.00191, 0.00095), (0.00175, 0.00101), (0.00158, 0.00118), (0.00154, 0.00142), (0.00161, 0.00166), (0.00204, 0.00194)], [(0.00010, 0.00272), (0.00007, 0.00275)], [(0.00142, 0.00248), (0.00133, 0.00244)], [(0.04274, 0.06883), (0.04891, 0.07774), (0.05627, 0.08908), (0.06107, 0.09732), (0.06372, 0.10207), (0.06508, 0.10473), (0.06595, 0.10707), (0.06645, 0.11015), (0.06652, 0.11453), (0.06627, 0.11834), (0.06531, 0.12096), (0.06348, 0.12326), (0.06096, 0.12414), (0.05643, 0.12334), (0.05342, 0.1218), (0.05095, 0.11857), (0.04995, 0.11433), (0.04984, 0.11046), (0.05071, 0.10729), (0.05298, 0.10476), (0.05523, 0.10212), (0.05675, 0.09812), (0.05705, 0.09286), (0.05449, 0.08656), (0.05047, 0.08107), (0.0487, 0.07851), (0.04615, 0.07471)], [(0.04615, 0.07479), (0.04274, 0.06893)]]"
#llm_output = "[[(0.0, 0.94992), (0.16725, 0.60267), (0.22456, 0.63272), (0.49239, 0.47579), (0.73216, 0.23539), (0.91111, 0.0), (1.0, 0.13189), (0.62923, 0.70284), (0.55321, 0.80634), (0.11345, 1.0), (0.0, 0.94992)]]"
convert_to_gpx((46.72532, -117.17138), (46.72818, -117.16845), llm_output)